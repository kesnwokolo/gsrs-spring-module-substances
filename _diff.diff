diff --git a/gsrs-module-substances-core/src/main/java/ix/ginas/models/v1/Name.java b/gsrs-module-substances-core/src/main/java/ix/ginas/models/v1/Name.java
index bf0787f..07f8607 100644
--- a/gsrs-module-substances-core/src/main/java/ix/ginas/models/v1/Name.java
+++ b/gsrs-module-substances-core/src/main/java/ix/ginas/models/v1/Name.java
@@ -18,6 +18,8 @@ import org.apache.commons.lang3.ObjectUtils;
 
 import javax.persistence.*;
 import java.util.*;
+import java.util.regex.Matcher;
+import java.util.regex.Pattern;
 
 @JSONEntity(title = "Name", isFinal = true)
 @Entity
@@ -263,6 +265,38 @@ public class Name extends CommonDataElementOfCollection {
 		return new ArrayList<String>(new TreeSet<String>(locators));
 	}
 
+	// tags begin
+
+	// This regex is used in NamesValidator in method, extractLocators. Does this mean
+	// only proceed with match if space and closing bracket found?
+	// Pattern p = Pattern.compile("(?:[ \\]])\\[([A-Z0-9]*)\\]");
+	// It gives NPE in tests and there is a question mark in the extractLocators
+	// code. So ask for clarification about which is better.
+	// extractLocators way:
+	// public final static Pattern extractTagFromNameRegex = Pattern.compile("(?:[ \\]])\\[([A-Z0-9]*)\\]");
+
+	public final static Pattern extractTagFromNameRegex = Pattern.compile("\\[([^\\[\\]]*)\\]\\s*$");
+//	public final static Pattern extractTagFromNameRegex = Pattern.compile("\\[(\\w+( +\\w+)*)\\]\\s*$");
+
+	public String extractTagTermFromName() {
+		return extractTagTermFromName(this.name);
+	}
+
+	public static String extractTagTermFromName(String name) {
+		// Assumes there is at most one tag term per name, and it's at the end of the name.
+		// Are these assumptions valid?
+		// The way locators are validated allows more than one locator per name. So this may need
+		// to be reconciled OR tag addition should be completely separated from locator addition.
+		if (name == null) { return null; }
+		String tagTerm = null;
+		Matcher regexMatcher = extractTagFromNameRegex.matcher(name);
+		while (regexMatcher.find()) {
+			tagTerm = regexMatcher.group(1);
+		}
+		return tagTerm;
+	}
+
+	// tags end
 
 	public static List<Name> sortNames(List<Name> nameList){
 		Collections.sort(nameList, Sorter.DISPlAY_NAME_FIRST_ENGLISH_FIRST);
