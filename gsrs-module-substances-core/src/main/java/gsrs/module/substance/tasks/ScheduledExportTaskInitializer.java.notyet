package gsrs.module.substance.tasks;

import java.time.LocalDate;
import java.time.format.DateTimeFormatter;
import java.util.Optional;
import java.util.concurrent.Future;
import java.util.concurrent.TimeUnit;
import java.util.concurrent.TimeoutException;
import java.util.function.Function;

import gov.nih.ncats.common.util.TimeUtil;
import gov.nih.ncats.common.util.Unchecked;
import gsrs.scheduledTasks.ScheduledTaskInitializer;
import gsrs.scheduledTasks.SchedulerPlugin.TaskListener;
import ix.core.models.Principal;
import ix.ginas.exporters.ExportMetaData;
import ix.ginas.exporters.ExportProcess;
import ix.ginas.models.v1.Substance;
import java.util.Map;
import java.util.function.Supplier;
import lombok.extern.slf4j.Slf4j;

@Slf4j
public class ScheduledExportTaskInitializer extends ScheduledTaskInitializer{


    
    private String username;
    private String name="Full Data Export";
    
    
    
    /*@Override
    public Initializer initializeWith(Map<String, ?> m) {
    	super.initializeWith(m);
        username=Optional.ofNullable((String)m.get("username")).orElse("admin");
        name=Optional.ofNullable((String)m.get("name"))
                     .orElse(name);
        additionalInitializeWith(m);
        
        return this;
    }*/
    
   

	@Override
	public String getDescription() {
		return name + " for " + username;
	}
	
    /*protected void additionalInitializeWith(Map<String, ?> m){

    }*/


    protected String getExtension(){
        return "gsrs";
    }

    protected String getCollectionID(){
        return "export-all-gsrs";
    }

    public boolean publicOnly(){
        return false;
    }

    public Function<String, String> fileNameGenerator(){
        return date ->  "auto-export-" + date;
    }

    protected Supplier<ExportProcessFactory> exportFactorySupplier(){
        return ()-> new ExportProcessFactory();
    }

    @Override
    public void run(TaskListener l) {
        // TODO Auto-generated method stub

        log.debug("Running export");
        try {
            
            Principal user = new Principal(username, null);
            String collectionID = getCollectionID();
            String extension = getExtension();
            boolean publicOnlyBool = publicOnly();

            ExportMetaData emd = new ExportMetaData(collectionID, null, user.username, publicOnlyBool, extension)
                    .onTotalChanged((c)->{
                        l.message("Exported " + c + " records");
                    });
            

            LocalDate ld=TimeUtil.getCurrentLocalDate();
            String date=ld.format(DateTimeFormatter.ISO_LOCAL_DATE);
            String fname = fileNameGenerator().apply(date) + "." + extension;
            
            emd.setDisplayFilename(fname);
            emd.originalQuery = null;
            
            
//TODO: There's no equivalent to any of this in 3.0 right now.
// we probably need to add it.

            ExportProcess<Substance> p = new ExportProcessFactory().getProcess(emd,
                    ProcessExecutionService.CommonStreamSuppliers.allForDeep(Substance.class));

            Future<?> future = p.run(out -> Unchecked.uncheck(() -> GinasApp.getSubstanceExporterFor(extension, out, publicOnlyBool)));
            boolean stillRunning = true;
            do{
                try{
                    future.get(3, TimeUnit.SECONDS);
                    stillRunning=false;
                }catch(TimeoutException ignored){
//                    if(Thread.currentThread().isInterrupted()){
//                        System.out.println("THREAD WAS INTERRUPTED");
//                        emd.cancel();
//                    }
                }catch(InterruptedException e){
                    e.printStackTrace();
                    System.out.println("got interrupted exception");
                    emd.cancel();
                }
            }while(stillRunning);
            
        } catch (Exception e) {
            e.printStackTrace();
        }
    }


}